#!/usr/bin/env node

// TODO: Remove this once babel-loader updates
// https://github.com/babel/babel-loader/pull/391
process.noDeprecation = true;

const Neutrino = require('../src/neutrino');
const yargs = require('yargs');
const { pathOr } = require('ramda');
const { join } = require('path');

const cwd = process.cwd();
let pkg = {};

try {
  pkg = require(join(cwd, 'package.json'));
} catch (ex) {}

const pkgPresets = pathOr([], ['neutrino', 'presets'], pkg);
const environments = { build: 'production', start: 'development', test: 'test' };
const args = yargs
  .option('presets', {
    description: 'A list of Neutrino presets used to configure the build',
    array: true,
    default: [],
    global: true
  })
  .command('start', 'Build a project in development mode')
  .command('build', 'Compile the source directory to a bundled build')
  .command('test [files..]', 'Run all suites from the test directory or provided files', {
    coverage: {
      description: 'Collect test coverage information and generate report',
      boolean: true,
      default: false
    },
    watch: {
      description: 'Watch source files for changes and re-run tests',
      boolean: true,
      default: false
    }
  })
  .demandCommand(1, 'You must specify a command for Neutrino to run.\nUSAGE:  neutrino <command>')
  .recommendCommands()
  .strict()
  .version()
  .help()
  .argv;

function run(command, presets) {
  process.env.NODE_ENV = environments[command];

  const options = pathOr({}, ['neutrino', 'options'], pkg);
  const api = new Neutrino(options);
  const cwd = process.cwd();

  // Grab all presets and merge them into a single webpack-chain config instance
  presets.forEach(preset => {
    const paths = [
      join(cwd, preset),
      join(cwd, 'node_modules', preset),
      preset
    ];

    for (let i = 0; i < paths.length; i += 1) {
      try {
        return api.use(require(paths[i]));
      } catch (exception) {
        if (/Cannot find module/.test(exception.message)) {
          continue;
        }

        exception.message = `Neutrino was unable to load the module '${preset}'. ` +
          `Ensure this module exports a function and is free from errors.\n${exception.message}`;
        throw exception;
      }
    }

    throw new Error(`Neutrino cannot find a module with the name or path '${preset}'. ` +
      `Ensure this module can be found relative to the root of the project.`);
  });

  // Also grab any Neutrino config from package.json and merge it into the config at a higher precedence
  if (pkg.neutrino && pkg.neutrino.config) {
    api.config.merge(pkg.neutrino.config);
  }

  api[command](args)
    .then(() => process.exit(0))
    .catch(err => {
      if (err) {
        console.error(err);
      }

      process.exit(1);
    });
}

run(args._[0], [...new Set(pkgPresets.concat(args.presets))]);
