#!/usr/bin/env node

// TODO: Remove this once babel-loader updates
// https://github.com/babel/babel-loader/pull/391
process.noDeprecation = true;

const Neutrino = require('../src/neutrino');
const yargs = require('yargs');
const { pathOr, pipe, partialRight } = require('ramda');
const { join } = require('path');
const stringify = require('javascript-stringify');
const sort = require('deep-sort-object');
const optional = require('optional');

const inspect = pipe(sort, partialRight(stringify, [null, 2]), console.log, process.exit);
const args = yargs
  .option('inspect', {
    description: 'Output a string representation of the configuration used by Neutrino and exit',
    boolean: true,
    default: false,
    global: true
  })
  .option('presets', {
    description: 'A list of Neutrino presets used to configure the build',
    array: true,
    default: [],
    global: true
  })
  .command('start', 'Build a project in development mode')
  .command('build', 'Compile the source directory to a bundled build')
  .command('test [files..]', 'Run all suites from the test directory or provided files', {
    coverage: {
      description: 'Collect test coverage information and generate report',
      boolean: true,
      default: false
    },
    watch: {
      description: 'Watch source files for changes and re-run tests',
      boolean: true,
      default: false
    }
  })
  .demandCommand(1, 'You must specify a command for Neutrino to run.\nUSAGE:  neutrino <command>')
  .recommendCommands()
  .strict()
  .version()
  .help()
  .argv;

function run(command, args) {
  const environments = { build: 'production', start: 'development', test: 'test' };
  const pkg = optional(join(process.cwd(), 'package.json')) || {};
  const pkgPresets = pathOr([], ['neutrino', 'presets'], pkg);
  const presets = [...new Set(pkgPresets.concat(args.presets))];
  const options = pathOr({}, ['neutrino', 'options'], pkg);
  const config = pathOr({}, ['neutrino', 'config'], pkg);
  const api = new Neutrino(Object.assign(options, { config }));

  process.env.NODE_ENV = environments[command];

  // Grab all presets and merge them into a single webpack-chain config instance
  api.import(presets);

  // Also grab any Neutrino config from package.json and merge it into the config at a higher precedence
  api.use(() => api.config.merge(config));

  if (args.inspect) {
    return inspect(api.getWebpackOptions());
  }

  api[command](args)
    .then(() => process.exit(0))
    .catch(err => {
      if (err) {
        console.error(err);
      }

      process.exit(1);
    });
}

run(args._[0], args);
